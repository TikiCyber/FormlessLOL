name: League of Legends Analysis Pipeline

on:
  schedule:
    - cron: "0 */6 * * *"  # Every 6 hours
  workflow_dispatch:
    inputs:
      region:
        description: 'Region to analyze'
        required: true
        default: 'na1'
        type: choice
        options: ['na1', 'euw1', 'eun1', 'kr', 'br1', 'la1', 'la2', 'oc1', 'ru', 'tr1', 'jp1']
      rank_tier:
        description: 'Rank tier to analyze'
        required: true
        default: 'DIAMOND'
        type: choice
        options: ['CHALLENGER', 'GRANDMASTER', 'MASTER', 'DIAMOND', 'PLATINUM', 'GOLD']
      analysis_depth:
        description: 'Number of recent matches per player'
        required: false
        default: '20'
        type: number

env:
  PYTHON_VERSION: '3.11'
  RIOT_API_RATE_LIMIT: '90'
  MAX_CONCURRENT_REQUESTS: '5'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
      region: ${{ steps.config.outputs.region }}
      tier: ${{ steps.config.outputs.tier }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate Timestamp
        id: timestamp
        run: echo "timestamp=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT
      
      - name: Set Configuration
        id: config
        run: |
          echo "region=${{ github.event.inputs.region || 'na1' }}" >> $GITHUB_OUTPUT
          echo "tier=${{ github.event.inputs.rank_tier || 'DIAMOND' }}" >> $GITHUB_OUTPUT

  extract-summoner-data:
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      summoner-count: ${{ steps.extract.outputs.count }}
      data-quality: ${{ steps.validate.outputs.quality }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python Environment
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Cache Static Game Data
        uses: actions/cache@v4
        with:
          path: data/static/
          key: lol-static-data-${{ hashFiles('src/loltracker/api/riot_client.py') }}
          restore-keys: lol-static-data-
      
      - name: Extract High-Tier Summoners
        id: extract
        env:
          RIOT_API_KEY: ${{ secrets.RIOT_API_KEY }}
          REGION: ${{ needs.setup.outputs.region }}
          TIER: ${{ needs.setup.outputs.tier }}
          LOG_LEVEL: INFO
        run: |
          python -m src.loltracker.extract_summoners \
            --region $REGION \
            --tier $TIER \
            --divisions I,II,III,IV \
            --max-players 200
          
          if [ -f "data/summoners.json" ]; then
            COUNT=$(jq '. | length' data/summoners.json)
            echo "count=$COUNT" >> $GITHUB_OUTPUT
            echo "Successfully extracted $COUNT summoners"
          else
            echo "count=0" >> $GITHUB_OUTPUT
            echo "::error::Failed to extract summoner data"
            exit 1
          fi
      
      - name: Validate Data Quality
        id: validate
        run: |
          python -m src.loltracker.validate_data --input data/summoners.json
          echo "quality=high" >> $GITHUB_OUTPUT
      
      - name: Upload Summoner Data
        uses: actions/upload-artifact@v4
        with:
          name: summoner-data-${{ needs.setup.outputs.timestamp }}
          path: |
            data/summoners.json
            data/summoner_stats.json
          retention-days: 7

  fetch-match-history:
    needs: [setup, extract-summoner-data]
    runs-on: ubuntu-latest
    if: needs.extract-summoner-data.outputs.summoner-count > 0
    strategy:
      matrix:
        batch: [1, 2, 3, 4]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python Environment
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Download Summoner Data
        uses: actions/download-artifact@v4
        with:
          name: summoner-data-${{ needs.setup.outputs.timestamp }}
          path: data/
      
      - name: Cache Match Data
        uses: actions/cache@v4
        with:
          path: data/cache/matches/
          key: match-cache-${{ needs.setup.outputs.region }}-${{ matrix.batch }}-${{ github.run_number }}
          restore-keys: |
            match-cache-${{ needs.setup.outputs.region }}-${{ matrix.batch }}-
            match-cache-${{ needs.setup.outputs.region }}-
      
      - name: Fetch Match History - Batch ${{ matrix.batch }}
        env:
          RIOT_API_KEY: ${{ secrets.RIOT_API_KEY }}
          REGION: ${{ needs.setup.outputs.region }}
          BATCH_SIZE: 50
          MAX_MATCHES_PER_PLAYER: ${{ github.event.inputs.analysis_depth || '20' }}
          REQUEST_TIMEOUT: 30
        run: |
          python -m src.loltracker.fetch_matches \
            --batch ${{ matrix.batch }} \
            --total-batches 4 \
            --region $REGION \
            --max-matches $MAX_MATCHES_PER_PLAYER
      
      - name: Validate Match Data
        run: |
          if [ -f "data/matches-batch-${{ matrix.batch }}.json" ]; then
            MATCH_COUNT=$(jq '. | length' data/matches-batch-${{ matrix.batch }}.json)
            echo "Batch ${{ matrix.batch }}: $MATCH_COUNT matches extracted"
            if [ "$MATCH_COUNT" -lt 10 ]; then
              echo "::warning::Low match count in batch ${{ matrix.batch }}: $MATCH_COUNT"
            fi
          else
            echo "::error::No match data file found for batch ${{ matrix.batch }}"
            exit 1
          fi
      
      - name: Upload Match Data
        uses: actions/upload-artifact@v4
        with:
          name: match-data-batch-${{ matrix.batch }}-${{ needs.setup.outputs.timestamp }}
          path: data/matches-batch-${{ matrix.batch }}.json
          retention-days: 7

  analyze-performance:
    needs: [setup, fetch-match-history]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python with Data Science Stack
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Download All Match Data
        uses: actions/download-artifact@v4
        with:
          pattern: match-data-batch-*-${{ needs.setup.outputs.timestamp }}
          path: data/
          merge-multiple: true
      
      - name: Consolidate Match Data
        run: |
          python -m src.loltracker.consolidate_data \
            --input-pattern "data/matches-batch-*.json" \
            --output data/consolidated_matches.json
      
      - name: Performance Analysis
        env:
          MIN_GAMES_THRESHOLD: 5
          CONFIDENCE_LEVEL: 0.95
        run: |
          echo "Running champion performance analysis..."
          python -m src.loltracker.analysis.performance_analyzer \
            --input data/consolidated_matches.json \
            --output data/champion_performance.json
          
          echo "Running playstyle analysis..."
          python -m src.loltracker.analysis.playstyle_analyzer \
            --input data/consolidated_matches.json \
            --output data/playstyle_analysis.json
          
          echo "Running meta trend analysis..."
          python -m src.loltracker.analysis.trend_analyzer \
            --input data/consolidated_matches.json \
            --output data/trend_analysis.json
      
      - name: Generate Performance Visualizations
        run: |
          python -m src.loltracker.visualization.create_charts \
            --performance-data data/champion_performance.json \
            --trend-data data/trend_analysis.json \
            --output-dir output/visualizations/
      
      - name: Upload Analysis Results
        uses: actions/upload-artifact@v4
        with:
          name: performance-analysis-${{ needs.setup.outputs.timestamp }}
          path: |
            data/champion_performance.json
            data/playstyle_analysis.json
            data/trend_analysis.json
            output/visualizations/
          retention-days: 14

  generate-recommendations:
    needs: [setup, analyze-performance]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python Environment
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Download Analysis Results
        uses: actions/download-artifact@v4
        with:
          name: performance-analysis-${{ needs.setup.outputs.timestamp }}
          path: data/
      
      - name: Generate Champion Recommendations
        env:
          RECOMMENDATION_ALGORITHM: 'hybrid'
          TOP_N_RECOMMENDATIONS: 10
          MIN_SAMPLE_SIZE: 50
        run: |
          echo "Generating champion recommendations..."
          python -m src.loltracker.analysis.recommendation_engine \
            --performance-data data/champion_performance.json \
            --playstyle-data data/playstyle_analysis.json \
            --algorithm $RECOMMENDATION_ALGORITHM \
            --top-n $TOP_N_RECOMMENDATIONS \
            --output data/champion_recommendations.json
      
      - name: Generate Build Recommendations
        run: |
          python -m src.loltracker.analysis.build_analyzer \
            --match-data data/consolidated_matches.json \
            --champion-data data/champion_performance.json \
            --output data/build_recommendations.json
      
      - name: Create Comprehensive Report
        env:
          REPORT_TITLE: "League of Legends Meta Analysis"
          REGION: ${{ needs.setup.outputs.region }}
          TIER: ${{ needs.setup.outputs.tier }}
        run: |
          python -m src.loltracker.reporting.generate_report \
            --champion-perf data/champion_performance.json \
            --recommendations data/champion_recommendations.json \
            --builds data/build_recommendations.json \
            --trends data/trend_analysis.json \
            --template templates/comprehensive_report.html \
            --output reports/lol_analysis_report_${{ needs.setup.outputs.timestamp }}.html
      
      - name: Generate Executive Summary
        run: |
          python -m src.loltracker.reporting.executive_summary \
            --data-sources "data/*.json" \
            --output reports/executive_summary_${{ needs.setup.outputs.timestamp }}.md
      
      - name: Upload Final Reports
        uses: actions/upload-artifact@v4
        with:
          name: lol-analysis-report-${{ needs.setup.outputs.timestamp }}
          path: |
            reports/
            data/champion_recommendations.json
            data/build_recommendations.json
          retention-days: 30

  deploy-results:
    needs: [setup, generate-recommendations]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Reports
        uses: actions/download-artifact@v4
        with:
          name: lol-analysis-report-${{ needs.setup.outputs.timestamp }}
          path: reports/
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          destination_dir: reports/${{ needs.setup.outputs.timestamp }}
      
      - name: Update Latest Report Link
        run: |
          echo "${{ needs.setup.outputs.timestamp }}" > reports/latest.txt
          echo "Report available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/reports/${{ needs.setup.outputs.timestamp }}/lol_analysis_report_${{ needs.setup.outputs.timestamp }}.html"

  notify-completion:
    needs: [setup, extract-summoner-data, fetch-match-history, analyze-performance, generate-recommendations]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Determine Pipeline Status
        id: status
        run: |
          if [[ "${{ needs.generate-recommendations.result }}" == "success" ]]; then
            echo "status=✅ Success" >> $GITHUB_OUTPUT
            echo "color=28a745" >> $GITHUB_OUTPUT
            echo "message=LoL analysis pipeline completed successfully. Analysis report generated with latest meta insights and champion recommendations." >> $GITHUB_OUTPUT
          elif [[ "${{ needs.extract-summoner-data.result }}" == "failure" ]]; then
            echo "status=❌ Failed - Data Extraction" >> $GITHUB_OUTPUT
            echo "color=dc3545" >> $GITHUB_OUTPUT
            echo "message=Pipeline failed during summoner data extraction. Check API key and rate limits." >> $GITHUB_OUTPUT
          elif [[ "${{ needs.fetch-match-history.result }}" == "failure" ]]; then
            echo "status=⚠️ Partial Failure - Match Fetch" >> $GITHUB_OUTPUT
            echo "color=ffc107" >> $GITHUB_OUTPUT
            echo "message=Some match data could not be fetched. Analysis may be incomplete." >> $GITHUB_OUTPUT
          else
            echo "status=❌ Failed" >> $GITHUB_OUTPUT
            echo "color=dc3545" >> $GITHUB_OUTPUT
            echo "message=LoL analysis pipeline failed. Check logs for details." >> $GITHUB_OUTPUT
          fi
      
      - name: Send Discord Notification
        if: env.DISCORD_WEBHOOK
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" -d "{
            \"embeds\": [{
              \"title\": \"🎮 League of Legends Analysis Pipeline\",
              \"description\": \"${{ steps.status.outputs.message }}\",
              \"color\": \"${{ steps.status.outputs.color }}\",
              \"fields\": [
                {\"name\": \"Status\", \"value\": \"${{ steps.status.outputs.status }}\", \"inline\": true},
                {\"name\": \"Region\", \"value\": \"${{ needs.setup.outputs.region }}\", \"inline\": true},
                {\"name\": \"Tier\", \"value\": \"${{ needs.setup.outputs.tier }}\", \"inline\": true},
                {\"name\": \"Summoners Analyzed\", \"value\": \"${{ needs.extract-summoner-data.outputs.summoner-count || 'N/A' }}\", \"inline\": true},
                {\"name\": \"Run Number\", \"value\": \"#${{ github.run_number }}\", \"inline\": true},
                {\"name\": \"Timestamp\", \"value\": \"${{ needs.setup.outputs.timestamp }}\", \"inline\": true}
              ],
              \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)\"
            }]
          }" $DISCORD_WEBHOOK
      
      - name: Send Email Report
        if: steps.status.outputs.status == '✅ Success' && secrets.SENDGRID_API_KEY
        uses: peter-evans/sendgrid-action@v1
        with:
          api-key: ${{ secrets.SENDGRID_API_KEY }}
          from: reports@loltracker.com
          to: ${{ secrets.REPORT_EMAIL }}
          subject: "LoL Meta Analysis Report - ${{ needs.setup.outputs.timestamp }}"
          message: |
            Your League of Legends meta analysis is complete!
            
            Region: ${{ needs.setup.outputs.region }}
            Rank Tier: ${{ needs.setup.outputs.tier }}
            Players Analyzed: ${{ needs.extract-summoner-data.outputs.summoner-count }}
            
            View the full report: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
